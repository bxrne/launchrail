name: Run Benchmarks and Update Results

on:
  push:
    branches:
      - main # Or your default branch

permissions:
  contents: write # Needed to commit BENCHMARK.md

jobs:
  benchmark:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23' 

      - name: Run Benchmarks and Capture Output
        id: run_bench
        run: |
          # Run from project root to find config.yaml, ignore exit code
          # The --benchdata flag was removed as the path comes from config.yaml
          output=$(go run ./cmd/bench --resultsdir ./testdata/results || true)
          echo "Captured output:" # Debugging line
          echo "$output" # Debugging line
          # Extract content between markers
          content=$(echo "$output" | awk '/--- MARKDOWN OUTPUT START ---/{flag=1; next} /--- MARKDOWN OUTPUT END ---/{flag=0} flag')
          echo "Extracted content:" # Debugging line
          echo "$content" # Debugging line
          # Escape special characters for multiline echo
          content=$(echo "$content" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g' | sed 's/\$/\\$/g')
          # Set the output for the next step
          echo "markdown_content<<EOF" >> $GITHUB_OUTPUT
          echo "$content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Write Output to BENCHMARK.md
        run: |
          TITLE="# Benchmark Results"
          FILE="BENCHMARK.md"
          markdown_output=$(echo "${{ steps.run_bench.outputs.markdown_content }}" | sed '/^$/d') # Remove blank lines

          # Check if markdown_output is empty or only whitespace
          if [ -z "$(echo "$markdown_output" | tr -d '[:space:]')" ]; then
            echo "No benchmark output captured, skipping BENCHMARK.md update."
            exit 0
          fi

          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          NEW_ENTRY="## $TIMESTAMP\n\n$markdown_output\n\n---"

          if [ -f "$FILE" ] && grep -qFx "$TITLE" "$FILE"; then
            # File exists and has the correct title
            echo "Prepending results to existing $FILE"
            # Read content after the title line
            OLD_CONTENT=$(tail -n +2 "$FILE")
            # Write title, new entry, separator, and old content
            echo -e "$TITLE\n\n$NEW_ENTRY\n$OLD_CONTENT" > "$FILE"
          else
            # File doesn't exist or doesn't have the correct title
            echo "Creating or overwriting $FILE"
            echo -e "$TITLE\n\n$NEW_ENTRY" > "$FILE"
          fi

      - name: Commit and Push BENCHMARK.md
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update benchmark results [skip ci]"
          file_pattern: BENCHMARK.md
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"