package reporting_test

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/bxrne/launchrail/internal/logger"
	"github.com/bxrne/launchrail/internal/reporting"
	"github.com/bxrne/launchrail/internal/storage"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestNewGenerator(t *testing.T) {
	gen, err := reporting.NewGenerator()
	require.NoError(t, err)
	assert.NotNil(t, gen)
}

func TestLoadSimulationData(t *testing.T) {
	logger.Reset() // Reset logger state for this test
	// 1. Setup Test RecordManager
	tempDir := t.TempDir()
	rm, err := storage.NewRecordManager(tempDir)
	require.NoError(t, err)

	// 2. Create a dummy record
	record, err := rm.CreateRecord()
	require.NoError(t, err)
	require.NotNil(t, record)
	recordHash := record.Hash

	// Add dummy motion data (1 data row, headers are written by Storage.Init)
	motionHeader := []string{"time", "altitude", "velocity", "acceleration", "thrust"} // Define for context if needed elsewhere or for data row structure clarity
	_ = motionHeader                                                                   // Acknowledge variable, headers handled by Init
	motionDataRow1 := []string{"0.0", "10.0", "0.0", "9.8", "1000.0"}
	err = record.Motion.Write(motionDataRow1)
	require.NoError(t, err)

	// Add a second data row to enable plotting
	motionDataRow2 := []string{"1.0", "15.0", "5.0", "9.8", "1000.0"}
	err = record.Motion.Write(motionDataRow2)
	require.NoError(t, err)

	// It's good practice to close the record resources, even in tests
	defer func() {
		err := record.Close()
		assert.NoError(t, err, "closing record in TestLoadSimulationData should not fail")
	}()

	// 3. Define report specific directory for this test
	reportDir := filepath.Join(tempDir, "report_assets")
	err = os.MkdirAll(reportDir, 0755)
	require.NoError(t, err)

	// 4. Call LoadSimulationData
	data, err := reporting.LoadSimulationData(recordHash, rm, reportDir)
	require.NoError(t, err)

	// 5. Assertions on ReportData
	assert.Equal(t, recordHash, data.RecordID)
	assert.Equal(t, "v0.0.0-dev", data.Version) // Check hardcoded version

	// Check for SVG assets generated by LoadSimulationData
	expectedAltitudeSVG := "altitude_vs_time.svg"
	expectedVelocitySVG := "velocity_vs_time.svg"
	expectedAccelerationSVG := "acceleration_vs_time.svg"

	assert.Contains(t, data.Assets, expectedAltitudeSVG, "Assets map should contain altitude SVG")
	assert.Contains(t, data.Assets, expectedVelocitySVG, "Assets map should contain velocity SVG")
	assert.Contains(t, data.Assets, expectedAccelerationSVG, "Assets map should contain acceleration SVG")

	// 6. Assertions on created dummy assets (SVGs only for this test)
	// data.Assets already stores the full path to the generated SVG.
	assert.FileExists(t, data.Assets[expectedAltitudeSVG])
	assert.FileExists(t, data.Assets[expectedVelocitySVG])
	assert.FileExists(t, data.Assets[expectedAccelerationSVG])
}

func TestLoadSimulationData_NotFound(t *testing.T) {
	logger.Reset() // Reset logger state for this test
	// 1. Setup Test RecordManager
	tempDir := t.TempDir()
	rm, err := storage.NewRecordManager(tempDir)
	require.NoError(t, err)

	// 2. Define report specific directory (even for a non-existent record)
	nonExistentHash := "this_hash_does_not_exist"
	reportDir := filepath.Join(tempDir, "report_assets_notfound")
	// No need to create this dir as LoadSimulationData should fail before asset creation

	// 3. Attempt to load non-existent record
	_, err = reporting.LoadSimulationData(nonExistentHash, rm, reportDir)

	// 4. Assertions
	require.Error(t, err) // Expect an error
	assert.Contains(t, err.Error(), "failed to load record")
	assert.Contains(t, err.Error(), nonExistentHash)
}

// func TestGenerateReportPackage(t *testing.T) {
// 	logger.Reset() // Reset logger state for this test
// 	// 1. Setup Test RecordManager and base reports directory
// 	tempDir := t.TempDir()
// 	rm, err := storage.NewRecordManager(filepath.Join(tempDir, "records"))
// 	require.NoError(t, err)
// 	reportsBaseDir := filepath.Join(tempDir, "reports")
//
// 	// 2. Create a dummy record
// 	record, err := rm.CreateRecord()
// 	require.NoError(t, err)
// 	recordHash := record.Hash
//
// 	// Add dummy motion data (1 data row, headers are written by Storage.Init)
// 	motionHeader := []string{"time", "altitude", "velocity", "acceleration", "thrust"} // Define for context if needed elsewhere or for data row structure clarity
// 	_ = motionHeader                                                                   // Acknowledge variable, headers handled by Init
// 	motionDataRow1 := []string{"0.0", "10.0", "0.0", "9.8", "1000.0"}
// 	err = record.Motion.Write(motionDataRow1)
// 	require.NoError(t, err)
//
// 	defer func() {
// 		err := record.Close()
// 		assert.NoError(t, err, "closing record in TestGenerateReportPackage should not fail")
// 	}()
//
// 	// 3. Call GenerateReportPackage
// 	generatedReportDir, err := reporting.GenerateReportPackage(recordHash, rm, reportsBaseDir)
// 	require.NoError(t, err)
//
// 	// 4. Assertions on the generated package structure
// 	expectedReportDir := filepath.Join(reportsBaseDir, recordHash)
// 	assert.Equal(t, expectedReportDir, generatedReportDir)
// 	assert.DirExists(t, generatedReportDir)
//
// 	mdFilePath := filepath.Join(generatedReportDir, "report.md")
// 	assert.FileExists(t, mdFilePath)
//
// 	assetsDir := filepath.Join(generatedReportDir, "assets")
// 	assert.DirExists(t, assetsDir)
//
// 	// Check for dummy asset files
// 	expectedAssetFiles := []string{
// 		"atmosphere_plot.png",
// 		"thrust_plot.png",
// 		"trajectory_plot.png",
// 		"dynamics_plot.png",
// 		"gps_map.png",
// 	}
// 	for _, assetFile := range expectedAssetFiles {
// 		assert.FileExists(t, filepath.Join(assetsDir, assetFile))
// 	}
//
// 	// 5. Assertions on report.md content (check for relative links)
// 	mdContentBytes, err := os.ReadFile(mdFilePath)
// 	require.NoError(t, err)
// 	mdContent := string(mdContentBytes)
//
// 	assert.Contains(t, mdContent, "# Simulation Report: "+recordHash)
// 	assert.Contains(t, mdContent, "Version: v0.0.0-dev")
// 	assert.Contains(t, mdContent, "![](assets/atmosphere_plot.png)")
// 	assert.Contains(t, mdContent, "![](assets/thrust_plot.png)")
// 	assert.Contains(t, mdContent, "![](assets/trajectory_plot.png)")
// 	assert.Contains(t, mdContent, "![](assets/dynamics_plot.png)")
// 	assert.Contains(t, mdContent, "![Landing Site Map](assets/gps_map.png)")
// }
